{
  "filetypes": [
    "ps1",
    "psm1",
    "psd1"
  ],
  "name": "PowerShell",
  "patterns": [
    {
      "comment": "Stop parsing",
      "begin": "(--%)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator"
        }
      },
      "end": "$",
      "patterns": [
        {
          "include": "#lineComment"
        },
        {
          "match": "(.)",
          "name": "source.powershell"
        }
      ]
    },
    {
      "match": "(\\$)(\\$)",
      "captures": {
        "1": {
          "name": "punctuation.definition.variable"
        },
        "2": {
          "name": "variable.language"
        }
      }
    },
    {
      "include": "#requires"
    },
    {
      "include": "#lineComment"
    },
    {
      "include": "#blockComment"
    },
    {
      "include": "#numericConstant"
    },
    {
      "include": "#stringSingleQuoted"
    },
    {
      "include": "#stringDoubleQuoted"
    },
    {
      "include": "#stringSingleQuotedHeredoc"
    },
    {
      "include": "#stringDoubleQuotedHeredoc"
    },
    {
      "include": "#illegalBacktick"
    },
    {
      "include": "#illegalVariable"
    },
    {
      "include": "#redirection"
    },
    {
      "include": "#type"
    },
    {
      "include": "#function"
    },
    {
      "include": "#commands"
    },
    {
      "include": "#class"
    },
    {
      "include": "#enum"
    },
    {
      "include": "#switch"
    },
    {
      "include": "#arrayDeclaration"
    },
    {
      "include": "#hashTable"
    },
    {
      "include": "#scriptBlock"
    },
    {
      "include": "#subExpression"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#controlWords"
    },
    {
      "include": "#executableFiles"
    },
    {
      "include": "#variable"
    }
  ],
  "repository": {
    "requires": {
      "comment": "#Requires statements",
      "patterns": [
        {
          "match": "(?i:^(#requires))\\s(?i:(-version))\\s(\\d)(?:(\\.\\d))?$",
          "captures": {
            "0": {
              "name": "meta.requires"
            },
            "1": {
              "name": "keyword.other.requires"
            },
            "2": {
              "name": "variable.parameter"
            },
            "3": {
              "name": "variable.parameter"
            },
            "4": {
              "name": "variable.parameter"
            }
          }
        },
        {
          "match": "(?i:^(#requires))\\s(?i:(-pssnapin))\\s(\\w+)(?:\\s(?i:(-version))(?:\\s(\\d))(\\.\\d)?)?$",
          "captures": {
            "0": {
              "name": "meta.requires"
            },
            "1": {
              "name": "keyword.other.requires"
            },
            "2": {
              "name": "variable.parameter"
            },
            "3": {
              "name": "variable.parameter"
            },
            "4": {
              "name": "variable.parameter"
            },
            "5": {
              "name": "variable.parameter"
            },
            "6": {
              "name": "variable.parameter"
            }
          }
        }
      ]
    },
    "lineComment": {
      "comment": "Line comment - must start with new line or at least one whitespace character before the '#'.",
      "begin": "(^#|\\s#)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment"
        }
      },
      "end": "$",
      "name": "comment.line",
      "patterns": [
        {
          "include": "#commentEmbeddedDocs"
        }
      ]
    },
    "blockComment": {
      "begin": "(<#)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment"
        }
      },
      "end": "(#>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.comment"
        }
      },
      "name": "comment.block",
      "patterns": [
        {
          "include": "#commentEmbeddedDocs"
        }
      ]
    },
    "stringEscapeChars": {
      "patterns": [
        {
          "match": "(\")(?:\")",
          "captures": {
            "1": {
              "name": "constant.character.escape"
            }
          }
        },
        {
          "match": "(`)(:?[\"'$`])",
          "captures": {
            "1": {
              "name": "constant.character.escape"
            }
          }
        },
        {
          "name": "constant.character.escape",
          "match": "(`[0abfnrtv])"
        }
      ]
    },
    "stringSingleQuoted": {
      "begin": "((?<!')')",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin"
        }
      },
      "end": "('(?!'))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end"
        }
      },
      "name": "string.quoted.single",
      "patterns": [
        {
          "include": "#stringSingleQuotedEscape"
        }
      ]
    },
    "stringSingleQuotedEscape": {
      "match": "(')(?:')",
      "captures": {
        "1": {
          "name": "constant.character.escape"
        }
      }
    },
    "stringDoubleQuoted": {
      "begin": "((?<!\\\")\\\")",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin"
        }
      },
      "end": "(\\\"(?!\\\"))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end"
        }
      },
      "name": "string.quoted.double",
      "patterns": [
        {
          "include": "#stringEscapeChars"
        },
        {
          "include": "#variableWithoutMemberHighlighting"
        },
        {
          "include": "#subExpression"
        }
      ]
    },
    "stringSingleQuotedHeredoc": {
      "begin": "(\\@'\\s*$)",
      "end": "^'\\@",
      "name": "string.quoted.single.heredoc",
      "patterns": [
        {
          "include": "#stringSingleQuotedEscape"
        }
      ]
    },
    "stringDoubleQuotedHeredoc": {
      "begin": "(\\@\"\\s*$)",
      "end": "^\"\\@",
      "name": "string.quoted.double.heredoc",
      "patterns": [
        {
          "include": "#illegalVariable"
        },
        {
          "include": "#stringEscapeChars"
        },
        {
          "include": "#variableWithoutMemberHighlighting"
        },
        {
          "include": "#subExpression"
        },
        {
          "include": "#scriptBlock"
        }
      ]
    },
    "controlWords": {
      "match": "(\\b(?<!-|\\$)(?i:begin|process|exit|break|return|catch|finally|for|continue|foreach|throw|from|trap|try|do|if|until|in|using|else|elseif|while|end|where)\\b(?!-|\\.))",
      "name": "keyword.control"
    },
    "executableFiles": {
      "comment": "Executable files, like exe, com, cmd and bat",
      "match": "(\\b(([\\p{L}A-Za-z0-9\\-_\\.]+).(?i:exe|com|cmd|bat))\\b)",
      "name": "support.executable"
    },
    "enum": {
      "captures": {
        "1": {
          "name": "storage.type"
        },
        "2": {
          "name": "entity.name.enum"
        }
      },
      "comment": "capture should be entity.name.type, but it doesn't provide a good color in the default schema.",
      "match": "(?<!\\w|-)(?i:(enum))\\s+(\\w+)\\s+"
    },
    "switch": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "keyword.control"
            },
            "2": {
              "name": "variable.parameter"
            },
            "4": {
              "name": "variable.parameter"
            },
            "5": {
              "name": "variable.parameter"
            }
          },
          "comment": "switch [-regex|-wildcard|-exact][-casesensitive] -file filename",
          "match": "\\b(?i:(switch))\\b\\s+(?i:(-regex|-wildcard|-exact){0,1})\\s*(?i:(-casesensitive){0,1})\\s*(?i:(-file))\\s+"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control"
            },
            "2": {
              "name": "variable.parameter"
            },
            "3": {
              "name": "variable.parameter"
            }
          },
          "comment": "switch [-regex|-wildcard|-exact][-casesensitive] (<value>)",
          "match": "\\b(?i:(switch))\\b\\s+(?i:(-regex|-wildcard|-exact){0,1})\\s*(?i:(-casesensitive){0,1})\\s*"
        }
      ]
    },
    "defaultKeyword": {
      "captures": {
        "0": {
          "name": "keyword.other"
        }
      },
      "comment": "Default is a reserved word when used in Switch statements. This is kind of a work-around - it will highlight only inside scriptblocks.",
      "match": "(?i:(default))\\s*(?=\\{)"
    },
    "redirection": {
      "patterns": [
        {
          "comment": "Merging redirection",
          "match": "(?<=\\s|^)([2-6\\*]?>&1)",
          "name": "keyword.operator.redirection"
        },
        {
          "comment": "File redirection",
          "match": "(?<=\\s|^)(([1-6\\*]?>{1,2})|(<))",
          "name": "keyword.operator.redirection"
        }
      ]
    },
    "function": {
      "begin": "(?<!\\S)(?i)(function|filter|workflow|configuration)\\s+(?:(global|local|script|private):)?((?:\\p{L}|\\d|_|-|\\.)+)",
      "beginCaptures": {
        "0": {
          "name": "meta.function"
        },
        "1": {
          "name": "keyword.other"
        },
        "2": {
          "name": "storage.modifier.scope"
        },
        "3": {
          "name": "entity.name.function"
        }
      },
      "end": "\\{|\\(",
      "patterns": [
        {
          "include": "#lineComment"
        }
      ]
    },
    "arrayDeclaration": {
      "begin": "(\\@?\\()",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin"
        }
      },
      "end": "(\\))(\\.)*(([\\w\"']+)*)",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parens.end"
        },
        "2": {
          "name": "punctuation.accessor"
        },
        "3": {
          "name": "variable.other.member"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "hashTable": {
      "begin": "(@\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.braces.begin"
        }
      },
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.braces.end"
        }
      },
      "name": "meta.hashtable",
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "scriptBlock": {
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.braces.begin"
        }
      },
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.braces.end"
        }
      },
      "name": "meta.scriptblock",
      "patterns": [
        {
          "include": "$self"
        },
        {
          "include": "#defaultKeyword"
        }
      ]
    },
    "subExpression": {
      "begin": "(\\$\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.parens.begin"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parens.end"
        }
      },
      "name": "meta.subexpression",
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "splatting": {
      "match": "(@)(\\w+)",
      "captures": {
        "1": {
          "name": "punctuation.definition.variable"
        },
        "2": {
          "name": "variable.other.readwrite"
        }
      }
    },
    "illegalBacktick": {
      "comment": "Any characters (other than new line) after a back-tick, is illegal in PowerShell.",
      "match": "(`(?!$))",
      "name": "invalid.illegal"
    },
    "illegalVariable": {
      "match": "\\$\\w+:\\s",
      "name": "invalid.illegal"
    },
    "commandParameter": {
      "patterns": [
        {
          "comment": "-Parameter value",
          "match": "\\s(-\\w+)(:)?",
          "name": "variable.parameter"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "begin": "(?<!\\\\)\\b((?i:(Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write))-(\\w+))\\b(?!\\.|\\\\)",
          "beginCaptures": {
            "1": {
              "name": "support.function"
            }
          },
          "comment": "Generic function match based on Verb-Noun pair using list of approved verbs.",
          "end": "((?=\\))|(?=\\})|(?<!`)\\n|(?<!`)\\r|(\\|))",
          "endCaptures": {
            "2": {
              "name": "keyword.operator"
            }
          },
          "name": "meta.command",
          "patterns": [
            {
              "include": "#scriptblock"
            },
            {
              "include": "#commandParameter"
            },
            {
              "include": "#lineComment"
            },
            {
              "include": "#redirection"
            },
            {
              "include": "#numericConstant"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#stringDoubleQuoted"
            },
            {
              "include": "#stringSingleQuoted"
            },
            {
              "include": "#arrayDeclaration"
            },
            {
              "include": "#illegalBacktick"
            },
            {
              "include": "#illegalVariable"
            },
            {
              "include": "#splatting"
            }
          ]
        },
        {
          "begin": "(?<!\\\\)\\b(?i:foreach-object|tee-object|where-object|sort-object)\\b(?!\\.|\\\\)",
          "beginCaptures": {
            "0": {
              "name": "support.function"
            }
          },
          "comment": "Built-in commands that don't adhere to the approved verbs standard.",
          "end": "((?=\\))|(?=\\})|(?<!`)\\n|(?<!`)\\r|(\\|))",
          "endCaptures": {
            "2": {
              "name": "keyword.operator"
            }
          },
          "name": "meta.command",
          "patterns": [
            {
              "include": "#scriptblock"
            },
            {
              "include": "#commandParameter"
            },
            {
              "include": "#lineComment"
            },
            {
              "include": "#redirection"
            },
            {
              "include": "#numericConstant"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#stringDoubleQuoted"
            },
            {
              "include": "#stringSingleQuoted"
            },
            {
              "include": "#arrayDeclaration"
            },
            {
              "include": "#illegalBacktick"
            },
            {
              "include": "#illegalVariable"
            }
          ]
        },
        {
          "begin": "(?<!\\\\|\\[)\\b(?i:ac|asnp|cat|cd|cfs|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|curl|cvpa|dbp|del|diff|dir|dnsn|ebp|echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fhx|fl|ft|fw|gal|gbp|gc|gcb|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps|gpv|group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md|measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri|rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|scb|select|set|shcm|si|sl|sleep|sls|sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|wget|wjb|write|where)\\b(?!\\.|\\\\|\\])",
          "beginCaptures": {
            "0": {
              "name": "support.function"
            }
          },
          "comment": "Built-in aliases",
          "end": "((?=\\))|(?=\\})|(?<!`)\\n|(?<!`)\\r|(\\|))",
          "endCaptures": {
            "2": {
              "name": "keyword.operator"
            }
          },
          "name": "meta.command",
          "patterns": [
            {
              "include": "#scriptblock"
            },
            {
              "include": "#commandParameter"
            },
            {
              "include": "#lineComment"
            },
            {
              "include": "#redirection"
            },
            {
              "include": "#numericConstant"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#stringDoubleQuoted"
            },
            {
              "include": "#stringSingleQuoted"
            },
            {
              "include": "#arrayDeclaration"
            },
            {
              "include": "#illegalBacktick"
            },
            {
              "include": "#illegalVariable"
            }
          ]
        },
        {
          "begin": "(\\b(([A-Za-z0-9\\-_\\.]+).(?i:ps1))\\b)",
          "beginCaptures": {
            "0": {
              "name": "support.function"
            }
          },
          "comment": "External script",
          "end": "((?=\\))|(?=\\})|(?<!`)\\n|(?<!`)\\r|(\\|))",
          "endCaptures": {
            "2": {
              "name": "keyword.operator"
            }
          },
          "name": "meta.command",
          "patterns": [
            {
              "include": "#scriptblock"
            },
            {
              "include": "#commandParameter"
            },
            {
              "include": "#lineComment"
            },
            {
              "include": "#redirection"
            },
            {
              "include": "#numericConstant"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#stringDoubleQuoted"
            },
            {
              "include": "#stringSingleQuoted"
            },
            {
              "include": "#arrayDeclaration"
            },
            {
              "include": "#illegalBacktick"
            },
            {
              "include": "#illegalVariable"
            }
          ]
        }
      ]
    },
    "class": {
      "begin": "(?i)(?=\\bclass\\b)",
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "(?i)\\b(class)\\b\\s+\\n*((?:\\p{L}|\\d|_|-|\\.)+)(?:\\s*(:)\\s*((?:\\p{L}|\\d|_|-|\\.)+))?",
          "beginCaptures": {
            "1": {
              "name": "keyword.other"
            },
            "2": {
              "name": "entity.name.class"
            },
            "3": {
              "name": "punctuation.accessor"
            },
            "4": {
              "name": "storage.type"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#lineComment"
            },
            {
              "include": "#blockComment"
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.braces.open"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.braces.close"
            }
          },
          "patterns": [
            {
              "include": "$self"
            },
            {
              "include": "#classBaseKeyword"
            },
            {
              "include": "#classReservedWords"
            }
          ]
        }
      ]
    },
    "classBaseKeyword": {
      "captures": {
        "1": {
          "name": "keyword.operator"
        },
        "2": {
          "name": "keyword.control.class"
        }
      },
      "comment": "The base keyword used in classes.",
      "match": "(:)\\s*(?i:(base))\\s*(?=\\()"
    },
    "classReservedWords": {
      "comment": "Reserved words for classes.",
      "match": "\\b(?i:(hidden|static))\\b",
      "name": "keyword.other"
    },
    "commentEmbeddedDocs": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "keyword.operator.documentation"
            },
            "2": {
              "name": "keyword.operator.documentation"
            }
          },
          "match": "(?i:(\\.)(SYNOPSIS|DESCRIPTION|EXAMPLE|INPUTS|OUTPUTS|NOTES|LINK|COMPONENT|FUNCTIONALITY|ROLE)\\b)",
          "name": "comment.block.documentation"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.operator.documentation"
            },
            "2": {
              "name": "keyword.operator.documentation"
            },
            "3": {
              "name": "constant.string.documentation"
            }
          },
          "match": "(?i:(\\.)(PARAMETER|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP)\\s+(.+))",
          "name": "comment.block.documentation"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.operator.documentation"
            },
            "2": {
              "name": "constant.string.documentation"
            }
          },
          "comment": "Requires -Version",
          "match": "(?i:(requires))\\s(-(?i:version)\\s\\d+(\\.\\d+)?)",
          "name": "comment.block.documentation"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.operator.documentation"
            },
            "2": {
              "name": "constant.string.documentation"
            }
          },
          "comment": "Requires -PSSnapin",
          "match": "(?i:(requires))\\s(-(?i:pssnapin)\\s\\w+(\\s*-(?i:version)\\s\\d+(\\.\\d+)?)?)",
          "name": "comment.block.documentation"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.operator.documentation"
            },
            "2": {
              "name": "constant.string.documentation"
            }
          },
          "comment": "Requires -Modules",
          "match": "(?i:(requires))\\s(-(?i:modules)\\s.*)",
          "name": "comment.block.documentation"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.operator.documentation"
            },
            "2": {
              "name": "constant.string.documentation"
            }
          },
          "comment": "Requires -ShellId",
          "match": "(?i:(requires))\\s(-(?i:shellid)\\s.*)",
          "name": "comment.block.documentation"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.operator.documentation"
            },
            "2": {
              "name": "constant.string.documentation"
            }
          },
          "comment": "Requires -RunAsAdministrator",
          "match": "(?i:(requires))\\s(-(?i:runasadministrator))",
          "name": "comment.block.documentation"
        }
      ]
    },
    "numericConstant": {
      "patterns": [
        {
          "comment": "Real [(+|-)] digits . digits [e [(+|-)] digits] [(d|l)] [(kb|mb|gb|tb|pb)]",
          "match": "(?<!\\w)([-+]?)\\d+\\.\\d+(?i:e(\\+|-){0,1}\\d+){0,1}(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\\w|\\d)",
          "name": "constant.numeric.real"
        },
        {
          "comment": "Real [(+|-)] . digits [e [(+|-)] digits] [(d|l)] [(kb|mb|gb|tb|pb)]",
          "match": "(?<!\\.|\\d|\\w)([-+]?)\\.\\d+(?i:e(\\+|-){0,1}\\d+){0,1}(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\\w|\\d)",
          "name": "constant.numeric.real"
        },
        {
          "comment": "Real [(+|-)] digits . [e [(+|-)] digits] [(d|l)] [(kb|mb|gb|tb|pb)]",
          "match": "(?<!\\w)([-+]?)(?<!\\d)\\d+\\.(?i:e(\\+|-){0,1}\\d+){0,1}(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\\w|\\d|\\.)",
          "name": "constant.numeric.real"
        },
        {
          "comment": "Integer [(+|-)] digits [(d|l)] [(kb|mb|gb|tb|pb)]",
          "match": "(?<!\\w|\\w\\.)([-+]?)\\d+(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\\w|\\d)",
          "name": "constant.numeric.integer"
        },
        {
          "comment": "Real [(+|-)] digits [e [(+|-)] digits] [(d|l)] [(kb|mb|gb|tb|pb)]",
          "match": "(?<!\\w|\\.)([-+]?)(?<!\\d)\\d+(?i:e(\\+|-){0,1}\\d+){0,1}(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\\w|\\d|\\.)",
          "name": "constant.numeric.real"
        },
        {
          "comment": "Hexadecimal 0x 0-f [l] [kb|mb|gb|tb|pb]",
          "match": "(?<!\\w|\\d)([-+]?)(?i:0x)(?i:[0-9a-f])+(?i:l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\\w|\\d)",
          "name": "constant.numeric.hex"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "comment": "Comparison",
          "match": "(?<=\\d|\\s|^)-(?i:as|is|isnot|in|notin|join|((c|i)?(eq|ne|gt|lt|ge|le|like|notlike|split|replace|contains|notcontains|match|notmatch))|shl|shr)\\b(?!\\.|\\\\)",
          "name": "keyword.operator.comparison"
        },
        {
          "comment": "Bitwise",
          "match": "(?<=\\d|\\s|^)-(?i:band|bor|bxor|bnot|shr|shl)\\b",
          "name": "keyword.operator.bitwise"
        },
        {
          "comment": "Logical",
          "match": "(?<=\\d|\\s|^)-(?i:and|or|xor)\\b",
          "name": "keyword.operator.logical"
        },
        {
          "comment": "Format",
          "match": "(?<=\\d|\\s|^)-(?i:f)\\b",
          "name": "keyword.operator.format"
        },
        {
          "comment": "Assignment",
          "match": "(=|-=|\\+=|\\*=|/=|%=)",
          "name": "keyword.operator.assignment"
        },
        {
          "comment": "Logical NOT",
          "match": "(?<=\\d|\\s|^|\\()((?i:-not)|!)",
          "name": "keyword.operator.unary.logical-not"
        },
        {
          "comment": "Multiplicative",
          "match": "([*/%])(?!\\.)",
          "name": "keyword.operator.multiplicative"
        },
        {
          "comment": "Increment Operator",
          "match": "(\\+\\+)",
          "name": "keyword.operator.increment"
        },
        {
          "comment": "Decrement Operator",
          "match": "(--)",
          "name": "keyword.operator.decrement"
        },
        {
          "comment": "Unary Plus",
          "match": "([+](?=\\$|\\(|\"))",
          "name": "keyword.operator.unary-plus"
        },
        {
          "comment": "Unary Minus",
          "match": "([-](?=\\$|\\(|\"))",
          "name": "keyword.operator.unary-minus"
        },
        {
          "comment": "Additive",
          "match": "([+-])(?!\\{|\\p{L}|@)",
          "name": "keyword.operator.additive"
        },
        {
          "comment": "Range",
          "match": "(\\.\\.)",
          "name": "keyword.operator.range"
        },
        {
          "comment": "Command invocation (Call)",
          "match": "(&|\\|)",
          "name": "keyword.operator.other"
        }
      ]
    },
    "type": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.brackets.begin"
        }
      },
      "comment": "Type []",
      "end": "(\\])(?:(::)([\\w]+))*(?:(?:(\\.)([\\w\"']+))*)",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.brackets.end"
        },
        "2": {
          "name": "punctuation.accessor"
        },
        "3": {
          "name": "meta.method"
        },
        "4": {
          "name": "punctuation.accessor"
        },
        "5": {
          "name": "entity.other.attribute-name"
        }
      },
      "patterns": [
        {
          "include": "#variableWithoutMemberHighlighting"
        },
        {
          "include": "$self"
        },
        {
          "comment": "Reserved words",
          "match": "(?i)\\b(cmdletbinding|alias|outputtype|parameter|validatenotnull|validatenotnullorempty|validatecount|validateset|allownull|allowemptycollection|allowemptystring|validatescript|validaterange|validatepattern|validatelength)\\b",
          "name": "entity.other.attribute-name"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin"
            }
          },
          "comment": "Parenthesis ()",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end"
            }
          },
          "patterns": [
            {
              "include": "$self"
            },
            {
              "comment": "Reserved words within [( )]",
              "match": "(?i)\\b(mandatory|valuefrompipeline|valuefrompipelinebypropertyname|valuefromremainingarguments|position|parametersetname|defaultparametersetname|supportsshouldprocess|positionalbinding|helpuri|confirmimpact|helpmessage)\\b",
              "name": "variable.other.member"
            }
          ]
        },
        {
          "match": "(?:([\\w]+)((`){0,2}(\\d){0,2})?)",
          "name": "entity.name.type"
        }
      ]
    },
    "variable": {
      "begin": "(?=\\$)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.variable"
        }
      },
      "end": "(?=\\s|\\))",
      "patterns": [
        {
          "include": "#type"
        },
        {
          "include": "#operators"
        },
        {
          "comment": "Invalid variable name",
          "match": "(\\$)(\\w+-\\w+)\\b",
          "name": "invalid.illegal"
        },
        {
          "comment": "built-in variables; $args",
          "match": "(\\$)(?i:(_|args|consolefilename|error|event|eventsubscriber|executioncontext|false|foreach|home|host|input|lastexitcode|matches|myinvocation|nestedpromptlevel|null|pid|psboundparameters|pscmdlet|psculture|psdebugcontext|pshome|psitem|psscriptroot|psuiculture|psversiontable|pwd|sender|shellid|sourceargs|sourceeventargs|switch|this|true))\\b",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable"
            },
            "2": {
              "name": "variable.language"
            }
          }
        },
        {
          "comment": "built-in variables; ${args}",
          "match": "(\\$)(\\{?)(?i:(_|args|consolefilename|error|event|eventsubscriber|executioncontext|false|foreach|home|host|input|lastexitcode|matches|myinvocation|nestedpromptlevel|null|pid|psboundparameters|pscmdlet|psculture|psdebugcontext|pshome|psitem|psscriptroot|psuiculture|psversiontable|pwd|sender|shellid|sourceargs|sourceeventargs|switch|this|true))\\b(\\}?)",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable"
            },
            "2": {
              "name": "punctuation.definition.variable"
            },
            "3": {
              "name": "variable.language"
            },
            "4": {
              "name": "punctuation.definition.variable"
            }
          }
        },
        {
          "comment": "variable method",
          "begin": "(\\.)([\\w\\-@#]+)(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.accessor"
            },
            "2": {
              "name": "variable.other.member"
            },
            "3": {
              "name": "punctuation.block.parens.start"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.block.parens.end"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "comment": "variable member with double quotes",
          "begin": "(\\.)(?=\")",
          "beginCaptures": {
            "1": {
              "name": "punctuation.accessor"
            },
            "2": {
              "name": "punctuation.definition.string.begin"
            }
          },
          "end": "(?<=\")",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end"
            }
          },
          "patterns": [
            {
              "include": "#stringDoubleQuoted"
            }
          ]
        },
        {
          "comment": "variable member with single quotes",
          "begin": "(\\.)(?=')",
          "beginCaptures": {
            "1": {
              "name": "punctuation.accessor"
            },
            "2": {
              "name": "punctuation.definition.string.begin"
            }
          },
          "end": "(?<=')",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end"
            }
          },
          "patterns": [
            {
              "include": "#stringSingleQuoted"
            }
          ]
        },
        {
          "comment": "variable member",
          "match": "(\\.)([\\w\\-@#]+)",
          "captures": {
            "1": {
              "name": "punctuation.accessor"
            },
            "2": {
              "name": "variable.other.member"
            }
          }
        },
        {
          "comment": "$var, $local:var",
          "match": "(\\$)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?([\\w?]+)(:\\w+)?",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable"
            },
            "2": {
              "name": "storage.modifier.scope"
            },
            "3": {
              "name": "variable.other.readwrite"
            },
            "4": {
              "name": "variable.other.readwrite"
            }
          }
        },
        {
          "comment": "${var}, ${local:var}",
          "match": "(\\$)(\\{)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?([\\w?`{}-]+)(:\\w+)?(\\})",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable"
            },
            "2": {
              "name": "punctuation.definition.variable"
            },
            "3": {
              "name": "storage.modifier.scope"
            },
            "4": {
              "name": "variable.other.readwrite"
            },
            "5": {
              "name": "variable.other.readwrite"
            },
            "6": {
              "name": "punctuation.definition.variable"
            }
          }
        }
      ]
    },
    "variableWithoutMemberHighlighting": {
      "patterns": [
        {
          "comment": "Invalid variable name",
          "match": "(\\$)(\\w+-\\w+)\\b",
          "name": "invalid.illegal"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.variable"
            },
            "2": {
              "name": "variable.language"
            }
          },
          "comment": "Automatic variables - read-only.",
          "match": "(\\$)(?i:(_|args|consolefilename|error|event|eventsubscriber|executioncontext|false|foreach|home|host|input|lastexitcode|matches|myinvocation|nestedpromptlevel|null|pid|psboundparameters|pscmdlet|psculture|psdebugcontext|pshome|psitem|psscriptroot|psuiculture|psversiontable|pwd|sender|shellid|sourceargs|sourceeventargs|switch|this|true))\\b"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.variable"
            },
            "2": {
              "name": "storage.modifier.scope"
            },
            "3": {
              "name": "variable.other.readwrite"
            },
            "4": {
              "name": "variable.other.readwrite"
            }
          },
          "comment": "$var, $local:var",
          "match": "(\\$)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?([\\w?]+)(:\\w+)?"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.variable"
            },
            "2": {
              "name": "punctuation.definition.variable"
            },
            "3": {
              "name": "storage.modifier.scope"
            },
            "4": {
              "name": "variable.other.readwrite"
            },
            "5": {
              "name": "punctuation.definition.variable"
            }
          },
          "comment": "${var}, ${script:var}",
          "match": "(\\$)(\\{)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?(.+?)(\\})"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.variable"
            },
            "2": {
              "name": "variable.other.readwrite"
            }
          },
          "comment": "Splatting",
          "match": "(@)(\\w+)"
        }
      ]
    }
  },
  "scopeName": "source.powershell",
  "uuid": "3af8c7dd-6c15-40d4-a28b-c6a3105a39c7"
}